[
["index.html", "R para análisis de datos Prefacio", " R para análisis de datos Gabriela Mathieu 2021-01-19 Prefacio "],
["introducción.html", "Capítulo 1 Introducción", " Capítulo 1 Introducción Este tutorial pretende guiarte para aprender a usar R y Rstudio, correr comandos de R, crear objetos en R, escribir tus propias funciones de R y scripts, cargar y usar paquetes de R, analizar y graficar datos. "],
["qué-es-r.html", "Capítulo 2 ¿Qué es R? 2.1 Curva de aprendizaje 2.2 Ayuda 2.3 Consola 2.4 Prompt 2.5 Rstudio 2.6 ¿Cómo interactuamos con R? 2.7 Calculadora 2.8 Funciones 2.9 Script 2.10 Nuevo script 2.11 Paquetes 2.12 Consejos 2.13 Atajos de teclado", " Capítulo 2 ¿Qué es R?   Programa estadístico: análisis   Lenguaje de programación: sintaxis   Software gratuito, se desacarga desde CRAN   Software libre: licencia GNU. Libertad de uso, modificación y distribución.   Comunidad mundial: lo usa y mejora. Casi 20.000 paquetes en CRAN y github   Comunidad en Uruguay: meetup R-Ladies y meetup GURU 2.1 Curva de aprendizaje Al inicio suele ser empinada 2.2 Ayuda Espero este tutorial te sirva de ayuda. 2.3 Consola Al abrir R - varía según el sistema operativo- aparece la consola donde se ejecuta el código R, es decir, las órdenes para que el programa ejecute. En las primeras líneas aparece un mensaje de bienvenida donde se puede leer la versión de R que se está usando. Esta imagen muestra como se ve R en Linux. Lo primero que verás en la consola de R es un mensaje de inicio, seguido por un “&gt;” y un cursor parpadeante. R ejecutará los comandos que escribas y devolverá un resultado. El resultado no siempre es el deseado podría ser un error o un warning. 2.4 Prompt El símbolo de ‘mayor’ indica que R está listo para recibir una orden 2.5 Rstudio Para facilitar el uso de R se utilizan editores de sintaxis que hacen todo más fácil. Desde hace algunos años el más popular mundialmente es Rstudio. RStudio es un entorno de desarrollo integrado (IDE por sus siglas en inglés) que al igual que R es gratuito de código abierto. RStudio proporciona un editor incorporado, es multiplataforma y permite la integración de control de versiones y gestión de proyectos. Al abrir Rstudio se muestran 3 cuadrantes: La consola interactiva de R (a la izquierda) Ambiente/Historial (en la esquina superior derecha) Archivos/Gráficos/Paquetes/Ayuda/Visor (abajo a la derecha) Lo usual es no escribir el código directamente en la consola y por lo tanto trabajarás con 4 cuadrantes Script: donde se escribe el código R Consola: donde se ejecuta el código R (a la izquiera) Entorno/Historial: en la pestaña Enviroment se visualizan los objetos en memoria (derecha arriba) Archivos/Gráficos/Paquetes/Ayuda/Visor: en la pestaña Plots se muestran los gráficos creados (derecha abajo) En realidad, Rstudio es mucho más que un simple editor de sintaxis, es un IDE (integrated development environment) entorno de desarrollo integrado que permite muchas más cosas que ejecutar código R. Más adelante veremos algunas de las bondades que nos ofrece esta herramienta. Un recurso muy útil para empezar a usarlo es la cheatsheet 2.6 ¿Cómo interactuamos con R? La interfaz de RStudio es simple. En el panel de la consola después del prompt se escribe una línea de código de R y se hace click en la tecla entrer para correrlo y se mostrará el resultado. El código R se llama comando porque encomienda a la computadora a hacer algo. Si escribís en la consola, luego del prompt, 5 + 2, Rstudio mostrará: 5 + 2 ## [1] 7 Es una orden válida y por lo tanto R muestra la respuesta, precedid de un “[1]”. Esto indica que el 7 es el primer resultado y en este caso es el único. Pero si escribís los primeros 50 números enteros, el 1 es el primer resultado, el 23 es el resultado 23° y el 45 es el 45°. Sirve para facilitar la lectura de los resultados pero podés ignorarlos si te confunden. 1:50 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 El operador “:” devuelve todos los enteros entre dos números enteros. Es una manera fácil de contruir una secuencia de números. Las órdenes elementales de R consisten en expresiones o asignaciones. Una expresión, se evalúa, se imprime el resultado y su valor se pierde. 2 + 3 ## [1] 5 Una asignación, crea un objeto y no se imprime el resultado. x &lt;- 2 + 3 Una asignación se hace utilizando el símbolo: o también con el símbolo = Otros programas estadísticos muestran directamente los resultados, R los guarda en un ‘objeto’. Ejecuto el nombre del objeto para imprimir el resultado x ## [1] 5 2.7 Calculadora R se puede usar como calculadora Paréntesis: (, ) Exponente: ^ o ** División: / Multiplicación: * Suma: + Resta: - Además de los operadores aritméticos, trae funciones matemáticas # valor absoluto abs(-1) ## [1] 1 – # logaritmo log(1) ## [1] 0 – # exponencial exp(0) ## [1] 1 – # raíz cuadrada sqrt(9) ## [1] 3 Los números pequeños o grandes tienen una notación científica: 2e-4 es 2*10 a la -4 2.8 Funciones Una función es un conjunto de instrucciones que operan sobre unos argumentos y producen un resultado. Una función esconde líneas de código que permite reutilizarlo una y otra vez de manera sencilla. Las funciones tienen nombres descriptivos -en inglés- y se acompañan de paréntesis curvos. Por ejemplo, sqrt es la abreviación de square root Dentro de los paréntesis se definen los valores de sus argumentos. La mayoría tiene al menos un argumento obligatorio y el resto con valores por defecto. Se puede utilizar la ayuda de R para saber qué hace una función ?sqrt help(&quot;sqrt&quot;) 2.9 Script Un script permite volver a reproducir nuestro análisis o que otra persona lo haga. Un archivo donde se escribe la sintaxis. Tendrá una extensión .R Es clave comentar el código, los comentarios deben ir precedidos por el símbolo de numeral (hash en inglés) #. Los comentarios se verán de un color diferente al código, incluso cuando se comenta parte de un código Es necesario siempre usar comillas para indicar nombres de archivos como en este caso. Tanto las comillas dobles (\") como las simples (’) sirven. 2.10 Nuevo script ¿Cómo enviamos el código del script a la consola? Para ejecutar una sola línea: colocar el cursor sobre esa línea y ejecutar Ctrl + ENTER. Si son varias líneas de código: seleccionarlas todas y ejecutar Ctrl + ENTER. Cada vez que presionas Enter y R te muestra un “+” en lugar de “&gt;”, significa que está esperando que completes el comando. Si deseas cancelar un comando, simplemente presiona “Esc” y RStudio te devolverá el “&gt;” prompt. 2.11 Paquetes Por defecto vienen precargadas una serie de funciones que están en el paquete ‘base’. Las funciones en R se organizan en paquetes según temas o disciplinas. Los paquetes debe instalarse en R una vez pero es necesario cargarlos en cada sesión (cada vez que abrimos R). Hay millones de funciones si todas estuvieran precargadas, no habría suficiente memoria RAM para trabajar. Existen paquetes de tan variadas disciplinas que es muy probable que utilicemos relativamente pocos. Podemos consultar los paquetes disponibles escribiendo la función available.packages() También podemos generar nuestras propias funciones e incluso crear un paquete de R! Para profundizar sobre el uso de paquetes ve a la sección … 2.12 Consejos La curva de aprendizaje de R al comienzo suele resultar muy empinada. ¿Cómo podemos evitar o superar la frustración? Usá R a diario. Traducí a R una sintaxis sencilla de otro programa que conozcas. Escribí tus sintaxis en un script y comentalas detalladamente (#). Reutilizá sintaxis existentes. Recurrí a los foros y a la ayuda de R para encontrar las soluciones a los problemas que te surjan Prestá atención a los mensajes de error y advertencia. 2.13 Atajos de teclado "],
["r-base.html", "Capítulo 3 R Base", " Capítulo 3 R Base Base R refiere a la colección de funciones que vienen por defecto cuando instalamos R y queda disponibles para usar cada vez que abrimos el programa. Podemos decir que esas fuciones son las que contiene el paquete Base. El resto de las funciones vienen en paquetes que debemos instalar y luego en cada nueva sesión, cargarlos. "],
["objetos.html", "Capítulo 4 Objetos 4.1 Tipo de objetos 4.2 Vectores 4.3 Vector 4.4 Vector 4.5 Ejemplo vectores 4.6 Coerción 4.7 Vectorización 4.8 Funciones descriptivas de un vector numérico 4.9 Data frame 4.10 Explorar los datos 4.11 Guardar objeto en formato RData", " Capítulo 4 Objetos R es un programa ‘orientado a objetos’: variables, datos, funciones, resultados, etc., se guardan en la memoria RAM en forma de objetos con un nombre específico sin usar archivos temporales. Cada clase de objeto tiene diferentes atributos que determinan la forma en que trabajan dentro de R, es decir, define cuáles funciones se le pueden aplicar. Estos objetos se pueden modificar o manipular con operadores y funciones –que a su vez son objetos–. Bajo este término se esconde la simplicidad y flexibilidad de R. Algunas de las clases más comunes de objetos son: ‘integer’, ‘numeric’, ‘character’, ‘logical’ (son vectores), ‘matrix’, ‘data.frame’, ‘list’ y ‘function’. 4.1 Tipo de objetos La cantidad de clases de objetos es muy grande y crece permanentemente a medida que se crean nuevos paquetes. Objeto Dimensión o largo Tipo de elementos Ejemplo Vector length() similares Matriz dim() similares Marco de datos dim() diferentes Lista length() diferentes 4.2 Vectores Un vector es una colección de uno o más objetos del mismo tipo (números o caracteres pero no ambos). Un escalar también es un vector en R. 4.2.1 c() Crea un vector Según sus elementos será la clase del vector: character, numeric, integer, logical Cada elemento va separado por una coma Con la función class() compruebo que tipo de objeto es 4.3 Vector x &lt;- c(15, 16, 17, 19) x ## [1] 15 16 17 19 class(x) ## [1] &quot;numeric&quot; y &lt;- x / 2 y ## [1] 7.5 8.0 8.5 9.5 class(y) # numeric porque contiene decimales ## [1] &quot;numeric&quot; 4.4 Vector Para el caso de “palabras” (“strings”), la clase “character” es la que utiliza R para manejar este tipo de objetos. Al igual que en la mayoría de los lenguajes de programación, R utiliza las comillas dobles (\") o simples (’) para delimitar un string. w &lt;- c(&quot;15&quot;, &quot;16&quot;, &quot;17&quot;, &quot;19&quot;) w ## [1] &quot;15&quot; &quot;16&quot; &quot;17&quot; &quot;19&quot; class(w) ## [1] &quot;character&quot; w &lt;- c(&quot;lunes&quot;, &quot;martes&quot;, &quot;miércoles&quot;, &quot;viernes&quot;) w ## [1] &quot;lunes&quot; &quot;martes&quot; &quot;miércoles&quot; &quot;viernes&quot; class(w) ## [1] &quot;character&quot; 4.5 Ejemplo vectores Comparemos algunas características de R con otros software estadísticos como Stata y SPSS. Esta tabla la tomé de Princeton University, la traduje y le agregué el año de creación. Características R SPSS Stata Año 1993 1968 1985 Curva aprendizaje Muy empinada Plana Empinada Interfaz Programación Point and click Programación/Point and click Manipulación de datos Avanzada Moderada Avanzada Análisis de datos Potente/Versátil Potente Potente Gráficos Excelentes Muy buenos Muy buenos Software libre 1 0 0 Costo Gratuito Muy costoso Accesible anio &lt;- c(1993, 1968, 1985) software_libre &lt;- c(T, F, F) costo &lt;- c(&quot;gratuito&quot;, &quot;costoso&quot;, &quot;accesible&quot;) length(anio) ## [1] 3 class(anio) ## [1] &quot;numeric&quot; 4.6 Coerción Como mencionamos anteriormente, estos elementos deben ser todos de la misma clase. Si se combinan objetos de diferente clase, R reasigna los elementos a la clase apropiada. Si contiene números y texto el vector será de clase character. La coerción es necesaria para el funcionamiento correcto de R. Al mismo tiempo puede ser una fuente de errores si no se tiene en cuenta. Un texto sin comillas en R es un objeto (siempre que cumpla las reglas de un nombre de objeto). 4.7 Vectorización R vectoriza las operaciones de manera que si sumo un número a un vector numérico, a cada elemento del vector le sumará ese número. Esta propiedad es una ventaja ya que permite evitar loops en muchas de situaciones y de esta manera se obtiene un código más ‘limpio’ y eficiente. x &lt;- -1:4 x ## [1] -1 0 1 2 3 4 El operador : sirve para generar vectores numéricos x + 5 # adiciono 5 ## [1] 4 5 6 7 8 9 x * 3 # multiplico por 3 ## [1] -3 0 3 6 9 12 4.8 Funciones descriptivas de un vector numérico length(x): devuelve la cantidad de elementos de x sort(x, decreasing = F): ordena los elementos de manera creciente sum(x): devuelve la suma de los elementos de x max(x): máximo min(x): mínimo mean(x): promedio aritmético de x median(x): mediana de x sd(x): desvío estándar de x var(x): varianza de x summary(x): resumen descriptivo de x (mínimo, máximo, media, mediana, cuartiles) 4.9 Data frame Puede verse como un conjunto de vectores de diferente tipo pero de igual largo. # vector numeric anio &lt;- c(1993, 1968, 1985) # vector lógico software_libre &lt;- c(T, F, F) # vector character costo &lt;- c(&quot;gratuito&quot;, &quot;costoso&quot;, &quot;accesible&quot;) # data frame df &lt;- data.frame(anio, software_libre, costo) class(df) ## [1] &quot;data.frame&quot; knitr::kable(df) anio software_libre costo 1993 TRUE gratuito 1968 FALSE costoso 1985 FALSE accesible En un conjunto de datos, cada variable/columna es un vector. class(df$anio); class(df$software_libre); class(df$costo) ## [1] &quot;numeric&quot; ## [1] &quot;logical&quot; ## [1] &quot;factor&quot; En general el data frame vendrá dado en un archivo. 4.10 Explorar los datos # dimensiones del objeto dim() # nombres de variables names() # estructura del objeto str() # resumen descriptivo de variables summary() 4.11 Guardar objeto en formato RData save(df, file = &quot;data/df.RData&quot;) El primer elemento debe ser un objeto. Podrían ser más de uno. Es necesario nombrar el argumento ‘file’ definiendo ruta y nombre de archivo. Si en file solo se define el nombre del archivo, se guarda en el directorio de trabajo actual: getwd() El nombre del objeto y el archivo pueden coincidir, pero no necesariamente. Un archivo Rdata es más liviano que cualquier otro formato externo. "],
["tidyverse.html", "Capítulo 5 Tidyverse 5.1 Paquetes 5.2 dplyr", " Capítulo 5 Tidyverse El paquete tidyverse es un conjunto de paquetes de R que comparten filosofía de diseño, gramática y estructura de datos. tidyverse proporciona una forma unificada, armoniosa y más poderosa de trabajar con datos que la que ofrece el paquete base. Un buen trabajo científico requiere de escribir un código claro y reproducible, este conjunto de paquetes ayudan para que esto sea posible. .center[ ] 5.1 Paquetes Importar archivos: csv, txt, dta, sav, etc. Limpiar y transformar Manipular texto y etiquetas Visualización: gráficos y mapas Inferencia: estimaciones puntuales y por intervalo 5.2 dplyr La estructura de datos más importante en R es el data frame. Permite representar la información en forma de tabla, donde cada fila representa una observación y cada columna represente una variable. El paquete dplyr no provee ninguna funcionalidad que no pueda ser realizada con las funciones del paquete base, sin embargo, es más simple y rápido (está escrito en C++). # install.packages(&quot;dplyr&quot;) library(dplyr) "],
["trabajar-en-proyecto.html", "Capítulo 6 Trabajar en proyecto 6.1 Crear proyecto 6.2 Abrir proyecto 6.3 Crear script 6.4 Flujo de trabajo", " Capítulo 6 Trabajar en proyecto 6.1 Crear proyecto 6.2 Abrir proyecto 6.3 Crear script 6.4 Flujo de trabajo Organizar los archivos en carpetas es clave para trabajar de manera ordenada y eficiente. Si tenemos archivos con los datos, scripts y gráficos conviene crear una carpeta por cada una de estas categorías "],
["análisis-de-datos.html", "Capítulo 7 Análisis de datos 7.1 Explorar datos", " Capítulo 7 Análisis de datos Ejemplificaremos con datos de alojamientos de Airbnb en la ciudad de Barcelona, España, disponibles en Inside Airbnb. La elección de los datos no responde a hacerle publicidad a esta empresa, simplemente los elegí porque contiene variables interesantes. Trabajaremos con los datos de alojamientos en Barcelona de Airbnb al 10 de enero de 2020. Son datos abiertos disponibles en http://insideairbnb.com/get-the-data.html. Son datos abiertos con licencia Creative Commons CC0 1.0 Universal \"Public Domain Dedication. Archivos Descripción listings.csv listado de alojamientos disponibles reviews.csv evaluaciones de personas alojadas neighbourhoods.csv listado de barrios neighbourhoods.geojson información geográfica de los barrios ¿Cómo funciona Airbnb? Quienes se hospedan pueden elegir entre casas/apartamentos enteros, solo cuartos privados o cuartos compartidos (room_type). Luego de la estadía deben dejar una evaluación (review). Los alojamientos varían en precio, mínimo de días de estadía, los días disponible, etc. Figure 7.1: Lisboa Accedemos a los datos desde la url o de manera local si ya los descargamos en la computadora. Está disponible el listado de alojamientos con sus características en un archivo csv y la información geográfica de los barrios en un formato geojson. Primero trabajaremos con el listado de alojamientos. ruta &lt;- &quot;http://data.insideairbnb.com/spain/catalonia/barcelona/2020-02-16/visualisations/listings.csv&quot; datos &lt;- read.csv(ruta) datos &lt;- readr::read_csv(ruta) Pero si previamente los bajamos, podemos importarlos desde la carpeta data del proyecto datos &lt;- readr::read_csv(&quot;data/listings.csv&quot;) 7.1 Explorar datos Lo primero que conviene hacer, sobre todo si no hemos trabajado antes con estos datos, es explorarlos. Las funciones básicas que dispone R para esto son las siguientes: head(): muestra los primeros casos. Por defecto, los primeros 6. tail(): muestra los últimos 6 casos. Por defecto, los últimos 6. View(): para mirar la base, como si abriéramos el archivo. Si es muy grande no se mostrarán todas filas ni todas las variables. summary(): brinda un resumen estadístico de cada variable cuando se aplica a un data.frame o de la variable en particular indicada. Si la variable es numérica se muestra el mínimo, máximo y los cuartiles. En caso de una variable de texto se muestra una tabla de los valores que toma. names(): brinda el listado de nombres de variables. # primeros casos head(datos) # ver los datos View(datos) # resumen estadistico summary(datos) # nombres de variables names(datos) Acá puedes ver la descripción de las variables que contiene la base. Tabla de variables Variable Tipo Descripción id identificador del alojamiento numérica name nombre del alojamiento texto host_id identificador de la persona anfitriona numérica host_name nombre de la persona anfitriona texto neighbourhood_group nombre del barrio agrupado texto neighbourhood nombre del barrio texto latitude latitud numérica longitud longuitud numérica room_type tipo de habitación texto price precio numérica minimum_nights cantidad mínima de noches numérica number_of_reviews cantidad de evaluaciones numérica last_review última evaluación fecha reviews_per_month evaluaciones por mes numérica calculated_host_listings_count availability_365 disponibilidad en el año numérica Exploremos una variable character como lo es room_type y una numeric como price. listado &lt;- read.csv(&quot;data/listings.csv&quot;, stringsAsFactors = FALSE) Visualizar los datos # ver el objeto en otra ventana View(listado) Las funciones dim(), names() y str() admiten un data frame como argumento. dim(listado) # cantidad de filas y columnas nrow(listado) # cantidad de filas ncol(listado) # cantidad de columnas names(listado) # nombre de variables str(listado) # estructura de la base La función summary() admite un data frame como argumento pero también una variable. summary(listado) # resumen descriptivo de variables Variables numéricas Para acceder a una variable de un data frame es necesario escribir &lt;objeto&gt;$&lt;variable&gt; # Máximo max(listado$price) # Mínimo min(listado$price) # Promedio mean(listado$price) # Mediana median(listado$price) # Varianza var(listado$price) # Desvío estándar sd(listado$price) "],
["manipular-datos.html", "Capítulo 8 Manipular datos 8.1 Acceder a las variables 8.2 Paquete dplyr 8.3 Seleccionar filas 8.4 Seleccionar columnas 8.5 Renombrar variables 8.6 Ordenar casos por cierta variable 8.7 Modificar o crear una nueva variable 8.8 Agrupar casos 8.9 Resumir los datos 8.10 Operadores lógicos 8.11 Evaluar condiciones", " Capítulo 8 Manipular datos 8.1 Acceder a las variables Por posición Esta forma no es robusta, podría cambiar más adelante el orden de las variables o cambiar el nombre y debería actualizar el índice para no cometer errores. Por nombre df$price ggplot(data = datos) + geom_boxplot( mapping = aes(x = price) ) 8.2 Paquete dplyr 8.3 Seleccionar filas 8.4 Seleccionar columnas 8.5 Renombrar variables 8.6 Ordenar casos por cierta variable 8.7 Modificar o crear una nueva variable 8.8 Agrupar casos 8.9 Resumir los datos 8.10 Operadores lógicos 8.11 Evaluar condiciones "],
["visualización.html", "Capítulo 9 Visualización", " Capítulo 9 Visualización "],
["pipe.html", "Capítulo 10 Pipe: %&gt;% 10.1 ¿Cómo sería preparar un mate en R? 10.2 %&gt;%", " Capítulo 10 Pipe: %&gt;% El ‘pipe’ -por su nombre en inglés- estructura una secuencia de operaciones sobre los datos de izquierda a derecha. A diferencia de la anidación de funciones que implica operaciones de adentro para afuera. En lugar de f(x): x %&gt;% f() 10.1 ¿Cómo sería preparar un mate en R? 10.2 %&gt;% ¿Preparar el mate con o sin ‘pipe’? # Mate con &#39;pipe&#39; mate %&gt;% poner_yerba() %&gt;% hinchar() %&gt;% colocar_bombilla() %&gt;% cebar() # Mate sin &#39;pipe&#39; cebar(colocar_bombilla(hinchar(poner_yerba(mate)))) ¿Cuál código te parece más claro? "],
["control-de-versiones.html", "Capítulo 11 Control de versiones 11.1 ¿Qué es git? 11.2 Configurar git en Rstudio 11.3 Registrarse en gitlab 11.4 Crear un repositorio 11.5 Clonar un repositorio 11.6 Commit 11.7 Push 11.8 Pull 11.9 Crear un proyecto en gitlab 11.10 Crear un repositorio en github 11.11 Instalar git 11.12 Commit y push 11.13 Pull 11.14 Historial 11.15 .gitignore", " Capítulo 11 Control de versiones Un programa de control de versiones mantiene una copia de los cambios en el código u otro contenido. Esto es útil en caso de que necesitemos revertir algún cambio realizado. Seguramente todxs hemos implementado un control de versiones en nuestros proyectos. Por ejemplo, haciendo una tesis y nombrando por fecha al archivo o por el avance alcanzado hasta acumular decenas de archivos similares. Esto tarde o temprano se convierte en un caos de archivos y nos brinda una falsa seguridad de que podremos recuperar algo que quitamos o cambiamos. ¿En qué versión estará? ¿En la de ayer o hoy de mañana? Si usamos una plataforma como Dropbox estamos en una situación similar, contamos con un historial de archivos en caso de necesitarlo. O con Google Docs tenemos la opción de “version history” que viene a ser algo similar. Una ventaja de Google Docs respecto a Dropbox es que permite editar un mismo documento por varias personas a la vez. Pero ninguno de estos métodos de control de versiones es lo suficientemente eficiente y menos cuando de programar se trata. Por ello, existen software específicos para el control de versiones, uno de los más populares es git. ¿Por qué es importante un software de contorl de versiones? Para revertir un cambio realizado y poder trabajar colaborativamente sobre un mismo proyecto sin preocuparnos que alguien borre algún archivo o parte del mismo. Nada se pierde, todo se recupera … ¿quiénes pensaron en la frase de Drexler? :notes: Para trabajar con otras personas en un mismo proyecto, es decir, sobre los mismos archivos debemos alojar una copia de estos archivos en un web server que oficia de nube. Dentro de los más populares se encuentran github y gitlab. Así GitHub o Gitlab proporcionan una copia de seguridad de tu trabajo que se puede recuperar si se pierde tu copia local, es decir, aquella que está en computadora. Por lo tanto, usar git conjuntamente con Github o Gitlab nos proporciona lo siguiente: realizar un seguimiento de los cambios en tu código localmente sincronizar entre diferentes versiones de los archivos, esto es, entre tus propias versiones o las de otras personas. probar cambios en el código sin perder una versión anterior. respaldar tus archivos en la nube (github.com o gitlab.com) compartir tus archivos en la web (github.com o gitlab.com) 11.1 ¿Qué es git? Hagamos una analogía entre git y el e-mail. E-mail es un protocolo para enviar mensajes online, independientemente de cual servidor de e-mail uses (gmail, hotmail, adinet, etc.). Git es un protocolo para compartir versiones de tu código, independientemente de cual servidor git uses (github, gitlab, bitbucket). Así github.com es a git lo que gmail.com es al e-mail. 11.2 Configurar git en Rstudio En primer lugar debemos indicarle a Rstudio dónde está el ejecutable de git en nuestra computadora. La manera más sencilla de configurar git para usarlo a través de Rstudio es hacerlo en la terminal que allí se encuentra, independientemente del sistema operativo que tengamos. Para crear nuestra cuenta de gitlab usamos un nombre de usuarix y un e-mail, estas es la información que debemos proporcionar en la terminal. Estos comandos que escribimos no son comandos de R sino que serán interpretados por nuestro sistema operativo para configurar git. git config --global user.name &quot;tu nombre&quot; git config --global user.email &quot;tumail@domain.com&quot; El script que se en el siguiente gif lo usé para copia estos comandos como ayuda y no cometer un error al pegarlo en la terminal. Una vez allí pegué en la terminal la primera línea y sustituí “tu nombre” por “gmathieuuy” que fue el nombre que utilicé para crear mi cuenta y di enter. Luego sustituí “tumail@domain.com” por el mail “gmathieu@gmx.com” y volví a hacer click en Enter. Así quedó configurado git para usarlo desde Rstudio. El terminal de RStudio proporciona acceso a la terminal del sistema. Lo que vemos de color verde loro es el nombre de usuarix de mi PC (antes del @) y el nombre de la PC (después del arroba). En celeste se describe la versión de R instalada. El signo de peso me habilita a escribir una orden. El $ es a la terminal lo que el prompt es a la consola de R. 11.3 Registrarse en gitlab 11.4 Crear un repositorio En gitlab se llama proyecto y en github se llama repositorio. 11.5 Clonar un repositorio 11.6 Commit 11.7 Push 11.7.1 Primer commit y push 11.8 Pull Objetivos Después de completar esta lección serás capaz de: Explicar como gihub y git usan los repositorios para alojar y manejar archivos. Usar el comando git clone para bajar una copia del repositorio a tu computadora. Requisitos Haber completado la sección de configuración de Git en tu computadora Haber creado una cuenta en Github.com y recordar usuario y contraseña. 11.9 Crear un proyecto en gitlab 11.10 Crear un repositorio en github 11.11 Instalar git git es el software de control de versiones. En distribuciones Linux suele venir instalado. En Windows se instala a través del ejecutable. 11.12 Commit y push Para enviar los cambios que realizamos localmente primero debemos seleccionar los archivos modificados, creados o eliminados, luego hacer commit para lo cual es necesario escribir un mensaje que describa los cambios que realizamos. Para que un mensaje del commit nos resulte útil debe describir brevemente lo que hicimos y no haber hecho muchas cosas antes de hacer un commit. Podemos volver a una versión anterior del código y para saber a cuál resulta muy útil ese mensaje. 11.13 Pull Descargar los cambios que otra persona o yo misma desde otra computadora realicé. Importante 11.14 Historial 11.15 .gitignore "],
["paquetes.html", "Capítulo 12 Paquetes 12.1 Instalar paquetes desde CRAN 12.2 Instalar paquetes desde github 12.3 Cargar", " Capítulo 12 Paquetes La instalación de un paquete se realiza una única vez en la computadora. Para poder usar un paquete en determinada sesión de R, es necesario cargarlo cada vez que se abre Rstudio. 12.1 Instalar paquetes desde CRAN Para instalar un paquete desde el repositorio oficial # instalamos el paquete &#39;readr&#39; desde el repositorio CRAN # se hace una única vez install.packages(&quot;&lt;NOMBRE PAQUETE&gt;&quot;) Por ejemplo, para instalar el paquete ‘readr’ ejecutamos lo siguiente: # instalamos el paquete &#39;readr&#39; desde el repositorio CRAN # se hace una única vez install.packages(&quot;readr&quot;) Para instalar más de un paquete a la vez, es necesario concatenar los nombres de los paquetes en un vector, para ello, usamos la función c(). # instalamos el paquete &#39;readr&#39; desde el repositorio CRAN # se hace una única vez install.packages(c(&quot;&lt;NOMBRE PAQUETE&gt;&quot;, &quot;&lt;NOMBRE PAQUETE&gt;&quot;)) Por ejemplo, podemos instalar ‘readr’ y ‘haven’: # instalamos el paquete &#39;readr&#39; desde el repositorio CRAN # se hace una única vez install.packages(&quot;readr&quot;, &quot;haven&quot;) 12.2 Instalar paquetes desde github Si en lugar de cargarlo del repositorio oficial, porque allí no se encuentra o bien por que queremos instalar una versión más reciente, debemos usar el paquete devtools (debe estar instalado) y usar la función install.github(), si el paquete está alojado en github (es lo más común). Como único argumento de la función, entre comillas, indicamos nombre de usuarix de quien lo desarrolló y nombre del paquete: # instalamos el paquete &#39;readr&#39; alojado en github # es del usuario hadley (Hadley Wickham). devtools::install.github(&quot;/&lt;NOMBRE USUARIX&gt;/&lt;NOMBRE PAQUETE&gt;&quot;) En el caso del paquete ‘readr’ desarrollado por Hadley Wickham, está alojado en github y el usuario es ‘hadley’. # instalamos el paquete &#39;readr&#39; alojado en github # es del usuario hadley (Hadley Wickham). devtools::install.github(&quot;/hadley/readr&quot;) 12.3 Cargar Para que un paquete quede disponible debemos cargarlo en cada sesión (cada vez que abrimos Rstudio), usando la función library() e indicando como único argumento el nombre del paquete, esta vez sin comillas. library(readr) "]
]
