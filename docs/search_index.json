[
["index.html", "R para análisis de datos y publicaciones Preface", " R para análisis de datos y publicaciones Gabriela Mathieu 2019-11-26 Preface This is the very first part of the book. "],
["introducción.html", "Chapter 1 Introducción", " Chapter 1 Introducción "],
["script.html", "Chapter 2 Script 2.1 Nuevo script 2.2 Primeros comandos 2.3 Consejos 2.4 Atajos de teclado", " Chapter 2 Script Un script permite volver a reproducir nuestro análisis o que otra persona lo haga. Un archivo donde se escribe la sintaxis. Tendrá una extensión .R Es clave comentar el código, los comentarios deben ir precedidos por #. Los comentarios se verán de un color diferente al código, incluso cuando se comenta parte de un código 2.1 Nuevo script 2.2 Primeros comandos 2.3 Consejos La curva de aprendizaje de R al comienzo suele resultar muy empinada. ¿Cómo podemos evitar o superar la frustración? Usá R a diario. Traducí a R una sintaxis sencilla de otro programa que conozcas. Escribí tus sintaxis en un script y comentalas detalladamente (#). Reutilizá sintaxis existentes. Recurrí a los foros y a la ayuda de R para encontrar las soluciones a los problemas que te surjan Prestá atención a los mensajes de error y advertencia. 2.4 Atajos de teclado "],
["r-y-rstudio.html", "Chapter 3 R y Rstudio 3.1 Instalación 3.2 Actualización de versiones", " Chapter 3 R y Rstudio 3.1 Instalación 3.2 Actualización de versiones "],
["data.html", "Chapter 4 Data 4.1 GDS 4.2 Paquetes 4.3 sf 4.4 st_read() 4.5 Importar shapes 4.6 Mapa de coropletas 4.7 Encoding 4.8 Expresiones regulares 4.9 ggplot2 4.10 leaflet 4.11 leaflet() 4.12 leaflet 4.13 Mapa 4.14 Alojamientos Berlin 4.15 Alojamientos Berlin", " Chapter 4 Data Ejemplificaremos con datos de alojamientos de Airbnb en la ciudad de Berlin, Alemania, disponibles en Inside Airbnb Accedemos a los datos desde la url. listings &lt;- readr::read_csv(url(&quot;http://data.insideairbnb.com/germany/be/berlin/2019-07-11/visualisations/listings.csv&quot;)) ## Parsed with column specification: ## cols( ## id = col_double(), ## name = col_character(), ## host_id = col_double(), ## host_name = col_character(), ## neighbourhood_group = col_character(), ## neighbourhood = col_character(), ## latitude = col_double(), ## longitude = col_double(), ## room_type = col_character(), ## price = col_double(), ## minimum_nights = col_double(), ## number_of_reviews = col_double(), ## last_review = col_date(format = &quot;&quot;), ## reviews_per_month = col_double(), ## calculated_host_listings_count = col_double(), ## availability_365 = col_double() ## ) ratings &lt;- readr::read_csv(&quot;data/ratings.csv&quot;) ## Parsed with column specification: ## cols( ## id = col_double(), ## review_scores_rating = col_double() ## ) # reviews &lt;- readr::read_csv(url(&quot;http://data.insideairbnb.com/germany/be/berlin/2019-07-11/visualisations/reviews.csv&quot;)) # # neighbour &lt;- readr::read_csv(url(&quot;http://data.insideairbnb.com/germany/be/berlin/2019-07-11/visualisations/neighbourhoods.csv&quot;)) # &quot;http://data.insideairbnb.com/germany/be/berlin/2019-07-11/visualisations/neighbourhoods.geojson&quot; 4.1 GDS R no es un SIG (Sistemas de Información Geográficos) R permite hacer Ciencia de Datos Geográficos (SDG) Atributos SIG SDG Disciplinas Geografía Geografía, Computación, Estadística Foco Interfaz Gráfica Código Reproducibilidad Mínimo Máximo 4.2 Paquetes sp, sf: para manejar información espacial vectorial raster: para trabajar con rasters ggplot2, rasterVis, tmap, leaflet, o mapview: para visualizar información espacial Es sencillo conectar R con programas SIG: GRASS GIS (rgrass7), SAGA (RSAGA), QGIS (RQGIS y qgisremote), incluso ArcGIS (arcgisbinding). 4.3 sf Combina las funcionalidades de 3 paquetes: sp, rgeos y rgdal Ventajas respecto a otros paquetes: Mayor velocidad para importar y exportar los datos Más tipos de geometrías soportadas Compatibilidad con tidyverse. Funciona el pipe! El paquete sp es predecesor de sf. Muchos paquetes espaciales de R todavía dependen del paquete sp, por lo tanto, es importante saber cómo convertir. Convertir objetos sf a sp # Para transformar de SF a SP objeto.sp &lt;- as(objeto.sf, &quot;Spatial&quot;) Convertir objetos sp a sf # Para transformar de SP a SF objeto.sf &lt;- st_as_sf(objeto.sp) 4.4 st_read() Los objetos sf tienen una clase que combina ‘data.frame’ y ‘sf’ Los objetos sf también tienen una columna especial que contiene los datos de geometría, usualmente llamado ‘geom’ o ‘geometry’. Las funciones del paquete dplyr se pueden aplicar. Para saber la totalidad de funciones que son aplicables a un objeto de clase ‘sf’ consultar methods(). Para la unión de objetos espaciales se usa st_join(x, y). El método de join utilizado es siempre left join, manteniendo los registros del primer atributo. 4.5 Importar shapes Los shapes con límites de los barrios de Berlin los obtenemos aquí. Para trabajar descomprimimos el zip y dejamos los 5 archivos en una misma carpeta. # cargo paquete library(sf) ## Linking to GEOS 3.5.1, GDAL 2.2.2, PROJ 4.9.2 # importo shapes unzip(&quot;data/GISPORTAL_GISOWNER01_BERLIN_BEZIRKE_BOROUGHS01.zip&quot;, exdir = &quot;data/&quot;) barrios &lt;- st_read(&quot;data/GISPORTAL_GISOWNER01_BERLIN_BEZIRKE_BOROUGHS01.shp&quot;, stringsAsFactors = FALSE) ## Reading layer `GISPORTAL_GISOWNER01_BERLIN_BEZIRKE_BOROUGHS01&#39; from data source `/home/calcita/MEGA/R/github.io/R-tutorial/R-tutorial/data/GISPORTAL_GISOWNER01_BERLIN_BEZIRKE_BOROUGHS01.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 12 features and 3 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 13.08835 ymin: 52.33824 xmax: 13.76114 ymax: 52.67551 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs # consulto clase class(barrios) ## [1] &quot;sf&quot; &quot;data.frame&quot; # consulto métodos methods(class = &quot;sf&quot;) 4.6 Mapa de coropletas Buenas prácticas Es un mapa temático en el que las regiones se colorean de un motivo que muestra una medida estadística. 4.7 Encoding library(stringi) # con qué encoding vienen los datos? stri_enc_mark(barrios$BezName) library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union # defino que los lea como &#39;ISO-8859-1&#39; y pase a &#39;UTF-8&#39; barrios &lt;- barrios %&gt;% mutate(BezName = stri_conv(BezName, from = &#39;ISO-8859-1&#39;, to = &#39;UTF-8&#39;, to_raw = FALSE)) head(barrios$BezName,12) ## [1] &quot;Mitte&quot; &quot;Friedrichshain-Kreuzberg&quot; ## [3] &quot;Pankow&quot; &quot;Charlottenburg-Wilmersdorf&quot; ## [5] &quot;Spandau&quot; &quot;Steglitz-Zehlendorf&quot; ## [7] &quot;Tempelhof-Schöneberg&quot; &quot;Neukölln&quot; ## [9] &quot;Treptow-Köpenick&quot; &quot;Marzahn-Hellersdorf&quot; ## [11] &quot;Lichtenberg&quot; &quot;Reinickendorf&quot; 4.8 Expresiones regulares # los barrios están escritos igual? table(unique(listings$neighbourhood_group) %in% barrios$BezName) ## ## FALSE TRUE ## 5 7 # busco la expresión y reemplazo library(stringr) large &lt;- barrios$BezName small &lt;- listings$neighbourhood_group berlin &lt;- listings %&gt;% mutate(neighbourhood_group = stri_replace(str = small,regex = small, replacement = large , mode=&quot;all&quot;)) ## Warning in stri_replace_all_regex(str, regex, replacement, ...): longer ## object length is not a multiple of shorter object length # chequeo table(unique(berlin$neighbourhood_group) %in% barrios$BezName) ## ## TRUE ## 12 Uno los data frame listings y ratings para agregar la variable ‘review_score’ berlin &lt;- left_join(berlin, ratings, by = &quot;id&quot;) 4.9 ggplot2 # cuento la cantidad de alojamientos por barrios bn &lt;- berlin %&gt;% group_by(neighbourhood_group) %&gt;% summarise(median_price = median(price)) # uno berlin con el objeto espacial barrios bn &lt;- left_join(bn, barrios, by = c(&quot;neighbourhood_group&quot;=&quot;BezName&quot;)) # calculo centroides de los polígonos latlong_mean &lt;- barrios %&gt;% st_centroid(geometry) # convierto la geometría en 2 vectores latlong_mean &lt;- st_coordinates(latlong_mean$geometry) latlong_mean &lt;- tibble(latlong_mean[,1], latlong_mean[,2]) names(latlong_mean) &lt;- c(&#39;lat&#39;, &#39;lon&#39;) bn &lt;- bind_cols(bn, latlong_mean) library(ggplot2) mapa&lt;- ggplot(bn) + geom_sf(aes(fill = median_price)) + geom_text(aes(x = lat, y = lon, label = neighbourhood_group), size = 3, hjust = 0.5)+ scale_fill_viridis_c(&quot;# Alojamientos&quot;, option = &quot;D&quot;) + ggtitle(&quot;Alojamientos Airbnb por barrios de Berlin&quot;) + theme_void() mapa 4.10 leaflet El paquete leaflet es una extensión java script para R que permite hacer mapas interactivos. Tutorial para comenzar. 4.11 leaflet() Función Descripción leaflet() crea el objeto leaflet addTiles() define el mapa de base, por defecto utiliza OpenStreetMap. Opciones setView() define por centroide y zoom addMarkers() marcadores a partir de una capa espacial o de pares de coordenadas. El orden de los comandos es importante. 4.12 leaflet library(leaflet) contenido &lt;- paste(sep = &quot;&lt;br/&gt;&quot;, paste0(&quot;&lt;img src=&#39;https://upload.wikimedia.org/wikipedia/commons/4/45/Estadio_Centenario_%28vista_a%C3%A9rea%29.jpg&quot;, &quot;&#39; /&gt;&quot;), paste0(&quot;&lt;b&gt;Name: &lt;/b&gt;&quot;, &quot;Estadio Centenario&quot;), paste0(&quot;&lt;b&gt;Place: &lt;/b&gt;&quot;, &quot;Montevideo, Uruguay&quot;), paste0(&quot;&lt;a href=&#39;https://es.wikipedia.org/wiki/Estadio_Centenario&quot;, &quot;&#39;&gt;Link&lt;/a&gt;&quot;)) mapa &lt;- leaflet() %&gt;% addTiles() %&gt;% addMarkers(lng = -56.159158, lat = -34.888494, popup = contenido) mapa 4.13 Mapa 4.14 Alojamientos Berlin # Alojamientos caros de Airbnb en Berlin top &lt;- filter(berlin, price &gt; 500 &amp; !is.na(review_scores_rating)) # de sf a sp barrios.sp &lt;- as(barrios, &quot;Spatial&quot;) barrios.sp@data &lt;- merge(barrios.sp@data, top, by.x =&quot;BezName&quot; , by.y=&quot;neighbourhood_group&quot;) library(leaflet) airbnb = makeIcon(&quot;https://raw.githubusercontent.com/calcita/R-tutorial/master/images/airbnb.png&quot;,&quot;/https://raw.githubusercontent.com/calcita/R-tutorial/master/images/airbnb@2x.png&quot;, 18, 18) mapa &lt;- leaflet(data = barrios.sp) %&gt;% #setView() addTiles() %&gt;% addMarkers(lng = ~longitude, lat = ~latitude, icon = airbnb) #addCircles() #addLegend() mapa 4.15 Alojamientos Berlin "]
]
