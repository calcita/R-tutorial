[
["index.html", "R para análisis de datos y publicaciones Prefacio", " R para análisis de datos y publicaciones Gabriela Mathieu 2020-03-03 Prefacio "],
["introducción.html", "Chapter 1 Introducción", " Chapter 1 Introducción ¿Qué es R? Programa estadístico: análisis Lenguaje de programación: sintaxis Software gratuito, se desacarga desde CRAN Software libre: licencia GNU. Libertad de uso, modificación y distribución. Comunidad mundial: lo usa y mejora. Casi 20.000 paquetes en CRAN y github Comunidad en Uruguay: meetup R-Ladies y meetup GURU "],
["curva-de-aprendizaje.html", "Chapter 2 Curva de aprendizaje", " Chapter 2 Curva de aprendizaje Al inicio suele ser empinada "],
["ayuda.html", "Chapter 3 Ayuda", " Chapter 3 Ayuda Espero este tutorial te sirva de ayuda. "],
["consola.html", "Chapter 4 Consola 4.1 Prompt", " Chapter 4 Consola Al abrir R - varía según el sistema operativo- aparece la consola donde se ejecuta el código R, es decir, las órdenes para que el programa ejecute. En las primeras líneas aparece un mensaje de bienvenida donde se puede leer la versión de R que se está usando. Esta imagen muestra como se ve R en Linux. 4.1 Prompt El símbolo de ‘mayor’ indica que R está listo para recibir una orden "],
["rstudio.html", "Chapter 5 Rstudio", " Chapter 5 Rstudio Para facilitar el uso de R se utilizan editores de sintaxis que hacen todo más fácil. Desde hace algunos años el más popular mundialmente es Rstudio. Al abrir Rstudio se muestran los cuatro cuadrantes: Script: donde se escribe el código R Consola: donde se ejecuta el código R Entorno: en la pestaña Enviroment se visualizan los objetos en memoria Gráficos: en la pestaña Plots se muestran los gráficos creados En realidad, Rstudio es mucho más que un simple editor de sintaxis, es un IDE (integrated development environment) entorno de desarrollo integrado que permite muchas más cosas que ejecutar código R. Más adelante veremos algunas de las bondades que nos ofrece esta herramienta. Un recurso muy útil para empezar a usarlo es la cheatsheet "],
["script.html", "Chapter 6 Script 6.1 Nuevo script", " Chapter 6 Script Un script permite volver a reproducir nuestro análisis o que otra persona lo haga. Un archivo donde se escribe la sintaxis. Tendrá una extensión .R Es clave comentar el código, los comentarios deben ir precedidos por #. Los comentarios se verán de un color diferente al código, incluso cuando se comenta parte de un código 6.1 Nuevo script "],
["cómo-interactuamos-con-r.html", "Chapter 7 ¿Cómo interactuamos con R? 7.1 Primeros comandos", " Chapter 7 ¿Cómo interactuamos con R? Las órdenes elementales de R consisten en expresiones o asignaciones. Una expresión, se evalúa, se imprime el resultado y su valor se pierde. 2 + 3 ## [1] 5 Una asignación, crea un objeto y no se imprime el resultado. x &lt;- 2 + 3 Una asignación se hace utilizando el símbolo: o también con el símbolo = Otros programas estadísticos muestran directamente los resultados, R los guarda en un ‘objeto’. Ejecuto el nombre del objeto para imprimir el resultado x ## [1] 5 7.1 Primeros comandos ¿Cómo enviamos el código del script a la consola? Para ejecutar una sola línea: colocar el cursor sobre esa línea y ejecutar Ctrl + ENTER. Si son varias líneas de código: seleccionarlas todas y ejecutar Ctrl + ENTER. "],
["funciones.html", "Chapter 8 Funciones", " Chapter 8 Funciones Una función es un conjunto de instrucciones que operan sobre unos argumentos y producen un resultado. Una función esconde líneas de código que permite reutilizarlo una y otra vez de manera sencilla. Las funciones tienen nombres descriptivos -en inglés- y se acompañan de paréntesis curvos. Por ejemplo, sqrt es la abreviación de square root Dentro de los paréntesis se definen los valores de sus argumentos. La mayoría tiene al menos un argumento obligatorio y el resto con valores por defecto. Se puede utilizar la ayuda de R para saber qué hace una función ?sqrt help(&quot;sqrt&quot;) "],
["paquetes.html", "Chapter 9 Paquetes 9.1 Consejos 9.2 Atajos de teclado", " Chapter 9 Paquetes Por defecto vienen precargadas una serie de funciones que están en el paquete ‘base’. Las funciones en R se organizan en paquetes según temas o disciplinas. Los paquetes debe instalarse en R una vez pero es necesario cargarlos en cada sesión (cada vez que abrimos R). Hay millones de funciones si todas estuvieran precargadas, no habría suficiente memoria RAM para trabajar. Existen paquetes de tan variadas disciplinas que es muy probable que utilicemos relativamente pocos. Podemos consultar los paquetes disponibles escribiendo la función available.packages() También podemos generar nuestras propias funciones e incluso crear un paquete de R! 9.1 Consejos La curva de aprendizaje de R al comienzo suele resultar muy empinada. ¿Cómo podemos evitar o superar la frustración? Usá R a diario. Traducí a R una sintaxis sencilla de otro programa que conozcas. Escribí tus sintaxis en un script y comentalas detalladamente (#). Reutilizá sintaxis existentes. Recurrí a los foros y a la ayuda de R para encontrar las soluciones a los problemas que te surjan Prestá atención a los mensajes de error y advertencia. 9.2 Atajos de teclado "],
["objetos.html", "Chapter 10 Objetos 10.1 Tipo de objetos", " Chapter 10 Objetos R es un programa ‘orientado a objetos’: variables, datos, funciones, resultados, etc., se guardan en la memoria RAM en forma de objetos con un nombre específico sin usar archivos temporales. Cada clase de objeto tiene diferentes atributos que determinan la forma en que trabajan dentro de R, es decir, define cuáles funciones se le pueden aplicar. Estos objetos se pueden modificar o manipular con operadores y funciones –que a su vez son objetos–. Bajo este término se esconde la simplicidad y flexibilidad de R. Algunas de las clases más comunes de objetos son: ‘integer’, ‘numeric’, ‘character’, ‘logical’ (son vectores), ‘matrix’, ‘data.frame’, ‘list’ y ‘function’. 10.1 Tipo de objetos La cantidad de clases de objetos es muy grande y crece permanentemente a medida que se crean nuevos paquetes. Objeto Dimensión o largo Tipo de elementos Ejemplo Vector length() similares Matriz dim() similares Marco de datos dim() diferentes Lista length() diferentes "],
["c.html", "Chapter 11 c()", " Chapter 11 c() Crea un vector Según sus elementos será la clase del vector: character, numeric, integer, logical Cada elemento va separado por una coma Con la función class() compruebo que tipo de objeto es "],
["vector.html", "Chapter 12 Vector", " Chapter 12 Vector x &lt;- c(15, 16, 17, 19) x ## [1] 15 16 17 19 class(x) ## [1] &quot;numeric&quot; y &lt;- x / 2 y ## [1] 7.5 8.0 8.5 9.5 class(y) # numeric porque contiene decimales ## [1] &quot;numeric&quot; "],
["vector-1.html", "Chapter 13 Vector", " Chapter 13 Vector Para el caso de “palabras” (“strings”), la clase “character” es la que utiliza R para manejar este tipo de objetos. Al igual que en la mayoría de los lenguajes de programación, R utiliza las comillas dobles (&quot;) o simples (’) para delimitar un string. w &lt;- c(&quot;15&quot;, &quot;16&quot;, &quot;17&quot;, &quot;19&quot;) w ## [1] &quot;15&quot; &quot;16&quot; &quot;17&quot; &quot;19&quot; class(w) ## [1] &quot;character&quot; w &lt;- c(&quot;lunes&quot;, &quot;martes&quot;, &quot;miércoles&quot;, &quot;viernes&quot;) w ## [1] &quot;lunes&quot; &quot;martes&quot; &quot;miércoles&quot; &quot;viernes&quot; class(w) ## [1] &quot;character&quot; "],
["data-frame.html", "Chapter 14 Data frame 14.1 Explorar los datos 14.2 Guardar objeto en formato Rdata", " Chapter 14 Data frame Puede verse como un conjunto de vectores de diferente tipo pero de igual largo. # vector numeric x &lt;- c(15, 16, 17, 18) # vector character w &lt;- c(&quot;lunes&quot;, &quot;martes&quot;, &quot;miércoles&quot;, &quot;jueves&quot;) # data frame df &lt;- data.frame(x, w) class(df) ## [1] &quot;data.frame&quot; En un conjunto de datos, cada variable/columna es un vector. class(df$x); class(df$w) ## [1] &quot;numeric&quot; ## [1] &quot;factor&quot; En general el data frame vendrá dado en un archivo. 14.1 Explorar los datos # dimensiones del objeto dim() # nombres de variables names() # estructura del objeto str() # resumen descriptivo de variables summary() 14.2 Guardar objeto en formato Rdata save(h2018, file = &quot;data/ech_h2018.Rdata&quot;) #&lt;&lt; El primer elemento debe ser un objeto. Podrían ser más de uno. Es necesario nombrar el argumento ‘file’ definiendo ruta y nombre de archivo. Si en file solo se define el nombre del archivo, se guarda en el directorio de trabajo actual: getwd() El nombre del objeto y el archivo pueden coincidir, pero no necesariamente. Un archivo Rdata es más liviano que cualquier otro formato externo. "],
["tidyverse.html", "Chapter 15 Tidyverse 15.1 Paquetes 15.2 dplyr", " Chapter 15 Tidyverse tidyverse proporciona una forma unificada, armoniosa y más poderosa de trabajar con datos que la que ofrece el paquete base. .center[ ] 15.1 Paquetes Importar archivos: csv, txt, dta, sav, etc. Limpiar y transformar Manipular texto y etiquetas Visualización: gráficos y mapas Inferencia: estimaciones puntuales y por intervalo 15.2 dplyr La estructura de datos más importante en R es el data frame. Permite representar la información en forma de tabla, donde cada fila representa una observación y cada columna represente una variable. El paquete dplyr no provee ninguna funcionalidad que no pueda ser realizada con las funciones del paquete base, sin embargo, es más simple y rápido (está escrito en C++). # install.packages(&quot;dplyr&quot;) library(dplyr) –&gt; "],
["trabajar-en-proyecto.html", "Chapter 16 Trabajar en proyecto 16.1 Crear proyecto 16.2 Abrir proyecto 16.3 Crear script 16.4 Flujo de trabajo", " Chapter 16 Trabajar en proyecto 16.1 Crear proyecto 16.2 Abrir proyecto 16.3 Crear script 16.4 Flujo de trabajo Organizar los archivos en carpetas es clave para trabajar de manera ordenada y eficiente. Si tenemos archivos con los datos, scripts y gráficos conviene crear una carpeta por cada una de estas categorías "],
["análisis-de-datos.html", "Chapter 17 Análisis de datos", " Chapter 17 Análisis de datos Ejemplificaremos con datos de alojamientos de Airbnb en la ciudad de Barcelona, España, disponibles en Inside Airbnb Accedemos a los datos desde la url. datos &lt;- readr::read_csv(url(&quot;http://data.insideairbnb.com/spain/catalonia/barcelona/2019-11-09/visualisations/listings.csv&quot;)) ## Parsed with column specification: ## cols( ## id = col_double(), ## name = col_character(), ## host_id = col_double(), ## host_name = col_character(), ## neighbourhood_group = col_character(), ## neighbourhood = col_character(), ## latitude = col_double(), ## longitude = col_double(), ## room_type = col_character(), ## price = col_double(), ## minimum_nights = col_double(), ## number_of_reviews = col_double(), ## last_review = col_date(format = &quot;&quot;), ## reviews_per_month = col_double(), ## calculated_host_listings_count = col_double(), ## availability_365 = col_double() ## ) Pero si previamente los bajamos, podemos importarlos desde la carpeta data del proyecto datos &lt;- readr::read_csv(&quot;data/listings.csv&quot;) "],
["paquetes-2.html", "Chapter 18 Paquetes", " Chapter 18 Paquetes La instalación de un paquete se realiza una única vez en la computadora. Para poder usar un paquete en determinada sesión de R, es necesario cargarlo cada vez que se abre Rstudio. Para instalar un paquete desde el repositorio oficial # instalamos el paquete &#39;readr&#39; desde el repositorio CRAN # se hace una única vez install.packages(&quot;readr&quot;) Para instalar un paquete desde github # instalamos el paquete &#39;readr&#39; alojado en github # es del usuario hadley (Hadley Wickham). devtools::install.github(&quot;/hadley/readr&quot;) Para que quede disponible debemos cargarlo en cada sesión library(readr) "],
["pipe.html", "Chapter 19 Pipe: %&gt;% 19.1 ¿Cómo sería preparar un mate en R? 19.2 %&gt;%", " Chapter 19 Pipe: %&gt;% El ‘pipe’ -por su nombre en inglés- estructura una secuencia de operaciones sobre los datos de izquierda a derecha. A diferencia de la anidación de funciones que implica operaciones de adentro para afuera. En lugar de f(x): x %&gt;% f() 19.1 ¿Cómo sería preparar un mate en R? 19.2 %&gt;% ¿Preparar el mate con o sin ‘pipe’? # Mate con &#39;pipe&#39; mate %&gt;% poner_yerba() %&gt;% hinchar() %&gt;% colocar_bombilla() %&gt;% cebar() # Mate sin &#39;pipe&#39; cebar(colocar_bombilla(hinchar(poner_yerba(mate)))) ¿Cuál código te parece más claro? "]
]
